// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  username      String
  password      String
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  groupid       Int?

  accounts  Account[]
  sessions  Session[]
  Kunjungan Kunjungan[]

  group Group? @relation(fields: [groupid], references: [id], onDelete: Cascade)

  createdat DateTime @default(now())
  updatedat DateTime @updatedAt

  @@map("msuser")
}

model Account {
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdat DateTime @default(now())
  updatedat DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("msaccount")
}

model Session {
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdat DateTime @default(now())
  updatedat DateTime @updatedAt

  @@map("mssession")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("msveriftoken")
}

model Group {
  id Int @id @default(autoincrement())

  groupnm  String?
  isactive Boolean?

  createdat DateTime? @default(now())
  updatedat DateTime? @updatedAt

  MenuAccess MenuAccess[]
  User       User[]

  @@map("msgroup")
}

model Menu {
  id Int @id @default(autoincrement())

  menunm   String?
  icon     String?
  seq      Int?
  masterid Int?
  isactive Boolean?

  createdat DateTime? @default(now())
  updatedat DateTime? @updatedAt

  MenuAccess MenuAccess[]

  @@map("msmenu")
}

model MenuAccess {
  id Int @id @default(autoincrement())

  menuid  Int?
  groupid Int?

  menu  Menu?  @relation(fields: [menuid], references: [id], onDelete: Cascade)
  group Group? @relation(fields: [groupid], references: [id], onDelete: Cascade)

  iscreate  Boolean?
  isread    Boolean?
  isupdate  Boolean?
  isdelete  Boolean?
  isspecial Boolean?

  createdat DateTime? @default(now())
  updatedat DateTime? @updatedAt

  @@map("msmenuaccess")
}

model Department {
  id Int @id @default(autoincrement())

  name      String
  companyid Int?

  company Company? @relation(fields: [companyid], references: [id], onDelete: Cascade)

  createdat DateTime?   @default(now())
  updatedat DateTime?   @updatedAt
  kunjungan Kunjungan[]

  @@map("msdepartment")
}

model Company {
  id Int @id @default(autoincrement())

  name    String
  address String

  createdat DateTime? @default(now())
  updatedat DateTime? @updatedAt

  department Department[]
  kunjungan  Kunjungan[]

  @@map("mscompany")
}

model Kunjungan {
  id Int @id @default(autoincrement())

  transcode    String
  transdate    DateTime @db.Date
  companyid    Int?
  departmentid Int?
  pic          String
  createdby    Int

  creator    User        @relation(fields: [createdby], references: [id], onDelete: Cascade)
  company    Company?    @relation(fields: [companyid], references: [id], onDelete: Cascade)
  department Department? @relation(fields: [departmentid], references: [id], onDelete: Cascade)

  createdat DateTime? @default(now())
  updatedat DateTime? @updatedAt

  monitoring Monitoring[]
  problem    Problem[]

  @@map("trkunjungan")
}

model Monitoring {
  id Int @id @default(autoincrement())

  kunjunganid Int
  nis         String
  nama        String
  jurnal      Boolean
  apd         Boolean
  rambut      Boolean
  penampilan  Boolean
  kinerja     Boolean
  lksp        Boolean
  alpha       Int

  createdat DateTime? @default(now())
  updatedat DateTime? @updatedAt

  kunjungan Kunjungan @relation(fields: [kunjunganid], references: [id], onDelete: Cascade)

  @@map("trmonitoring")
}

model Problem {
  id Int @id @default(autoincrement())

  kunjunganid  Int
  evaluasi     String
  penyelesaian String

  createdat DateTime? @default(now())
  updatedat DateTime? @updatedAt

  kunjungan Kunjungan @relation(fields: [kunjunganid], references: [id], onDelete: Cascade)

  @@map("trproblem")
}
